The game designer is building a single-player game in Pygame by modeling this game as a Markov Decision Process (MDP). Your task is to add rendering functions that decide how state variables are rendered as UI components on the screen, according to the feature requested by the game designer.
The game has the following implementation already:
```python
import pygame
import sys
import random


class StateManager:
    def __init__(self):
        # height of the gameplay screen
        self.SCREEN_HEIGHT = int(600)
        
        # width of the gameplay screen
        self.SCREEN_WIDTH = int(800)
        
        # fps of the gameplay screen
        self.FPS = int(60)
        
        # The current y-coordinate of the bird character
        self.bird_y_position = int(300)
        
        # The fixed x-coordinate of the bird character
        self.bird_x_position = int(100)
        
        # Height of the bird character
        self.bird_height = int(25)
        
        # Width of the bird character
        self.bird_width = int(25)
        
        # List of positions of pipe pairs, where each pair is a dictionary with x, upper_y, and lower_y
        self.pipes_list = list([{'x': 800, 'upper_y': 0, 'lower_y': 350}])
        
        # Width of each pipe
        self.pipe_width = int(50)
        
        # Indicates whether the game is currently active or not. Used to check game over condition upon collision or out-of-bounds.
        self.game_active = bool(True)
        
        # The color of the bird character in RGB format
        self.bird_color = tuple(tuple((255, 204, 0)))
        
        # The color of the pipes in RGB format, which should not be white
        self.pipe_color = tuple(tuple((0, 255, 0)))
        
        # The color of the game over text in RGB format, ensuring visibility over the background.
        self.game_over_text_color = tuple(tuple((255, 0, 0)))
        


# all the code for the rendering functions
def render_bird(state_manager):
    # Clear the previous frame (handled in main game loop)
    # Draw the bird as a rectangle
    bird_rect = pygame.Rect(state_manager.bird_x_position, state_manager.bird_y_position, state_manager.bird_width, state_manager.bird_height)
    pygame.draw.rect(state_manager.screen, state_manager.bird_color, bird_rect)
def render_pipes(state_manager):
    for pipe in state_manager.pipes_list:
        # Draw the upper pipe
        pygame.draw.rect(state_manager.screen, state_manager.pipe_color, pygame.Rect(pipe['x'], 0, state_manager.pipe_width, pipe['upper_y']))
        # Calculate the starting y-coordinate of the lower pipe by adding upper pipe height and the gap
        lower_pipe_y = pipe['upper_y'] + state_manager.pipe_gap
        # Draw the lower pipe
        pygame.draw.rect(state_manager.screen, state_manager.pipe_color, pygame.Rect(pipe['x'], lower_pipe_y, state_manager.pipe_width, state_manager.SCREEN_HEIGHT - lower_pipe_y))
# the new rendering function will be here

def main():
    state_manager = StateManager()
    clock = pygame.time.Clock()
    running = True
    while running:
        action = pygame.event.poll()
        if action.type == pygame.QUIT:
            running = False

        # all the code for state transitional logics
        # omitted for brevity

        # Fill the screen with white
        state_manager.screen.fill((255, 255, 255))
        # all the code for rendering states as UI components
        # {function_description}
        {function_name}(state_manager)
        pygame.display.flip()
        state_manager.clock.tick(state_manager.fps)

    pygame.quit()

if __name__ == "__main__":
    pygame.init()
    pygame.display.set_caption("")
    main()
```

Please implement the following request from the game designer and return your answer in the following format:
```json
{
    "function_name": "render_game_over_message",
    "function_description": "This function should display a game over message on the screen when the game_active state variable is set to False, signaling that the game has ended due to a collision.",
    "function_implementation": "the pygame implementation of the function, including the first line of the function definition",
}
```

Here are the dos and don'ts for this request:
- Only implement things that pertain to how state variables are rendered as UI components on the screen. Other aspects like input event handling and state transition will be handled separately.
- Please make sure that all of the state variables remain unchanged in the rendering functions.
- Minimize the number of functions to add while meeting the game designer's requirements.
- Include only the essential details requested by the game designer. Do not add things that are not requested.
- These rendering functions will be called in every iteration of the main game loop. If you want to add a conditional logic to the function, please implement it in the function itself.
- Note that the background color of the screen is white so white UI components will not be visible. Do not fill the screen with white again in the rendering functions.
- Note that the new function will be added to the end of the list of rendering functions.

====================

{
    "function_name": "render_game_over_message",
    "function_description": "This function should display a game over message on the screen when the game_active state variable is set to False, signaling that the game has ended due to a collision.",
    "function_implementation": "def render_game_over_message(state_manager):\n    if not state_manager.game_active:\n        font = pygame.font.SysFont(None, 48)\n        text_surface = font.render('Game Over!', True, state_manager.game_over_text_color)\n        text_rect = text_surface.get_rect(center=(state_manager.SCREEN_WIDTH // 2, state_manager.SCREEN_HEIGHT // 2))\n        state_manager.screen.blit(text_surface, text_rect)"
}