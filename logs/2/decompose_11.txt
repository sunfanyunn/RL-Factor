The game designer is building a single-player game in Pygame by modeling this game as a Markov Decision Process (MDP).
There are three types of functions/modules in this game: input event handling, state transition, and UI rendering. 
- input event handling: functions that detect user input and update the state variables accordingly.
- state transition: functions that update the state variables according to the game logic.
- UI rendering: functions that render the state variables as UI components on the screen.

Given a specific feature requested by the game designer, your task is to decide how to implement this feature by decomposing it into the three types of functions/modules mentioned above.

The game already has the following implementation:
```python
import pygame
import sys
import random


class StateManager:
    def __init__(self):
        # height of the gameplay screen
        self.SCREEN_HEIGHT = int(600)
        
        # width of the gameplay screen
        self.SCREEN_WIDTH = int(800)
        
        # fps of the gameplay screen
        self.FPS = int(60)
        
        # The current y-coordinate of the bird character
        self.bird_y_position = int(300)
        
        # The value by which the bird's vertical velocity increases when the player inputs a flap
        self.flap_power = float(-5.0)
        
        # The current vertical velocity of the bird considering gravity
        self.bird_vertical_velocity = float(0.0)
        
        # Height of the bird character
        self.bird_height = int(25)
        
        # The acceleration due to gravity affecting the bird
        self.gravity = float(0.2)
        
        # The terminal velocity of the bird (the maximum speed at which the bird can fall)
        self.terminal_velocity = float(10.0)
        
        # The color of the bird character in RGB format
        self.bird_color = tuple(tuple((255, 204, 0)))
        


# all the input event handling functions
def handle_bird_movement(state_manager):
    """This function should detect key press events for the up arrow and down arrow keys. On pressing the up arrow key, the bird should move upwards, and on pressing the down arrow key, the bird should move downwards. This function updates the bird's vertical position in state variables."""
    if event.type == pygame.KEYDOWN:
        if event.key == pygame.K_UP:
            state_manager.bird_y_position -= state_manager.bird_velocity
        elif event.key == pygame.K_DOWN:
            state_manager.bird_y_position += state_manager.bird_velocity

def handle_bird_flap(state_manager):
    """Modify the bird's vertical velocity by a certain amount upwards when the user inputs a flap (up arrow key), counteracting gravity. When the up arrow is pressed, increase bird's vertical velocity by the flap power value."""
    if event.type == pygame.KEYDOWN and event.key == pygame.K_UP:
        state_manager.bird_vertical_velocity += state_manager.flap_power



# all the state transitional functions
def update_bird_position(state_manager):
    """This function should ensure that the bird's vertical movement does not go beyond the boundaries of the gameplay screen. If the bird's position is such that moving further up or down would exceed the screen height, the bird's position should be adjusted to stay within the screen limits."""
    bird_bottom = state_manager.bird_y_position + state_manager.bird_height
    bird_top = state_manager.bird_y_position
    if bird_bottom > state_manager.SCREEN_HEIGHT:
        state_manager.bird_y_position = state_manager.SCREEN_HEIGHT - state_manager.bird_height
    elif bird_top < 0:
        state_manager.bird_y_position = 0

def apply_gravity_and_update_position(state_manager):
    """Apply gravity to the bird's vertical velocity within each game tick, ensuring it doesn't exceed terminal velocity, and update the bird's y-position accordingly. Prevent the bird from moving beyond the gameplay screen's boundaries."""
    state_manager.bird_vertical_velocity += state_manager.gravity
    if state_manager.bird_vertical_velocity > state_manager.terminal_velocity:
        state_manager.bird_vertical_velocity = state_manager.terminal_velocity
    state_manager.bird_y_position += state_manager.bird_vertical_velocity
    if state_manager.bird_y_position < 0:
        state_manager.bird_y_position = 0
    if state_manager.bird_y_position + state_manager.bird_height > state_manager.SCREEN_HEIGHT:
        state_manager.bird_y_position = state_manager.SCREEN_HEIGHT - state_manager.bird_height




# all the UI rendering functions that govern how state variables are rendered as UI components
def render_bird(state_manager):
    """This function should render the bird on the game screen as a rectangle using the current state variables of the bird's position, width, height, and color. It should also clear the previous frame before drawing the new one."""
    # Clear the previous frame (handled in main game loop)
    # Draw the bird as a rectangle
    bird_rect = pygame.Rect(state_manager.bird_x_position, state_manager.bird_y_position, state_manager.bird_width, state_manager.bird_height)
    pygame.draw.rect(state_manager.screen, state_manager.bird_color, bird_rect)



def main():
    state_manager = StateManager()
    running = True
    while running:
        event = pygame.event.poll()
        if event.type == pygame.QUIT:
            running = False
        # call all the input event handling functions
        # call all the state transitional functions
        # call all the rendering functions
    pygame.quit()

if __name__ == "__main__":
    pygame.init()
    main()
```

Please provide the answer in the following format within a JSON object:
```json
{
    "input_logic": {
        "description": "the detailed description of what this function should achieve.",
        "function_name": "the name of the function to be added",
    },
    "state_transition": {
        "description": "the detailed description of what this function should achieve",
        "function_name": "the name of the function to be added",
    },
    "ui_rendering": {
        "description": "the detailed description of what this function should achieve",
        "function_name": "the name of the function to be added",
    },
   
}
```

The game designer's request is: Allow the bird to 'jump' or move upwards in response to a player's mouse click or key press, temporarily overcoming gravity..

Here are the dos and don'ts for this request:
- Only give output that pertains to the particular request from the game designer. Do not add things that are not requested. For example, if the game designer asks to "introduce an obstacle", do not add additional logics such as "allow the human player to control the obstacle with arrow keys".
- Be detailed and specific about what the function should achieve. For example, do not give instructions such as "description": "This function should handle input events relevant to the game.".
- The resulting JSON should have three keys: "input_logic", "state_transition", and "ui_rendering". Each key should have two keys: "description" and "function_name". The "description" key should have a string value that describes what the function should achieve. The "function_name" key should have a string value that is the name of the function to be added. If the function already exists, this new function will be used in place of the old one.
- If any particular type of functions is not needed, please leave it as an empty string. It is okay to have empty strings if the function has already been implemented.
- The state variables are already updated according to the game designer's request. You should not include steps that update the state variables.

====================

{
    "input_logic": {
        "description": "Detect a mouse click or spacebar key press and trigger a 'jump' action for the bird which temporarily overcomes gravity. This should be treated as a flap action, similar to pressing the up arrow key. The 'jump' action should then be reflected in the bird's vertical velocity.",
        "function_name": "handle_bird_jump"
    },
    "state_transition": {
        "description": "",
        "function_name": ""
    },
    "ui_rendering": {
        "description": "",
        "function_name": ""
    }
}