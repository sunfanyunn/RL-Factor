The game designer is building a single-player game in Pygame by modeling this game as a Markov Decision Process (MDP). Your task is to define and code new state transition functions according to the feature requested by the game designer.
The game has the following implementation already:
```python
import pygame
import sys
import random


class StateManager:
    def __init__(self):
        # height of the gameplay screen
        self.SCREEN_HEIGHT = int(600)
        
        # width of the gameplay screen
        self.SCREEN_WIDTH = int(800)
        
        # fps of the gameplay screen
        self.FPS = int(60)
        
        # The current y-coordinate of the bird character
        self.bird_y_position = int(300)
        
        # The fixed x-coordinate of the bird character
        self.bird_x_position = int(100)
        
        # Height of the bird character
        self.bird_height = int(25)
        
        # Width of the bird character
        self.bird_width = int(25)
        
        # The color of the bird character in RGB format
        self.bird_color = tuple(tuple((255, 204, 0)))
        
        # The velocity at which the bird moves up or down
        self.bird_velocity = int(5)
        
        # The acceleration due to gravity affecting the bird
        self.gravity = float(0.2)
        
        # The current vertical velocity of the bird considering gravity
        self.bird_vertical_velocity = float(0.0)
        
        # The value by which the bird's vertical velocity increases when the player inputs a flap
        self.flap_power = float(-5.0)
        
        # The terminal velocity of the bird (the maximum speed at which the bird can fall)
        self.terminal_velocity = float(10.0)
        


# the new function will be here



def main():
    state_manager = StateManager()
    running = True
    while running:
        event = pygame.event.poll()
        if event.type == pygame.QUIT:
            running = False
        # {function_description}
        {function_name}(state_manager)
    pygame.quit()

if __name__ == "__main__":
    pygame.init()
    main()
```

Please implement the following request from the game designer and return your answer in the following format:
```json
{
    "function_name": "apply_gravity_and_update_position",
    "function_description": "Apply gravity to the bird's vertical velocity within each game tick, ensuring it doesn't exceed terminal velocity, and update the bird's y-position accordingly. Prevent the bird from moving beyond the gameplay screen's boundaries.",
    "function_implementation": "the pygame implementation of the function, including the first line of the function definition",
}
```

Here are the dos and don'ts for this request:
- Only implement things that pertain to updating the state variables. Other aspects of the game like input event handling and UI components will be handled separately.
- Minimize the number of functions added while meeting the game designer's requirements.
- Include only the essential details requested by the game designer. Do not add things that are not requested.
- These state transition functions will be called in every iteration of the main game loop. If you want to add a conditional logic to the function, please implement it in the function itself.
- Note that the new function will be added to the end of the list of state transition functions.

====================

{
    "function_name": "apply_gravity_and_update_position",
    "function_description": "Apply gravity to the bird's vertical velocity within each game tick, ensuring it doesn't exceed terminal velocity, and update the bird's y-position accordingly. Prevent the bird from moving beyond the gameplay screen's boundaries.",
    "function_implementation": "def apply_gravity_and_update_position(state_manager):\n    state_manager.bird_vertical_velocity += state_manager.gravity\n    if state_manager.bird_vertical_velocity > state_manager.terminal_velocity:\n        state_manager.bird_vertical_velocity = state_manager.terminal_velocity\n    state_manager.bird_y_position += state_manager.bird_vertical_velocity\n    if state_manager.bird_y_position < 0:\n        state_manager.bird_y_position = 0\n    if state_manager.bird_y_position + state_manager.bird_height > state_manager.SCREEN_HEIGHT:\n        state_manager.bird_y_position = state_manager.SCREEN_HEIGHT - state_manager.bird_height\n"
}